# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/fuchsia/bootdata.gni")
import("//build/gn/packages.gni")
import("//build/package.gni")
import("//build/toolchain/clang_toolchain.gni")

# OpenTrustGroup specific configs
import("//build/otg/config.gni")

declare_args() {
  # Manifest files describing target libraries from toolchains.
  # TODO(TO-471): This is ignored as a build argument and overridden below.
  toolchain_manifests = [ "${clang_prefix}/../lib/${clang_target}.manifest" ]

  # Groups to include from the Zircon /boot manifest into /boot.
  # This is either "all" or a comma-separated list of one or more of:
  #   core -- necessary to boot
  #   misc -- utilities in /bin
  #   test -- test binaries in /bin and /test
  zircon_boot_groups = "core"

  # File containing kernel command line arguments to roll into the
  # bootdata image used for booting.
  kernel_cmdline_file = ""

  # A list of platforms, i.e. different Zircon kernels that were built.
  # There will be a different `bootdata-${platform}.bin` built for each.
  if (target_cpu == "x64") {
    zircon_platforms = [ "x86" ]
  } else {
    zircon_platforms = [ target_cpu ]
  }

  # The package key to use for signing the system package. New keys can be
  # generated with the `pm` host command.
  system_package_key = "//build/development.key"

  # The size of the minfs data partition image to create. Normally this image
  # is added to FVM, and can therefore expand as needed. It must be at least
  # 10mb (the default) in order to be succesfully initialized.
  data_image_size = "10m"

  # Build boot images that prefer Zedboot over local boot.
  always_zedboot = false
}

declare_args() {
  # Groups to include from the Zircon /boot manifest into /system
  # (instead of into /boot like Zircon's own bootdata.bin does).
  # Should not include any groups that are also in zircon_boot_groups,
  # which see.  If zircon_boot_groups is "all" then this should be "".
  if (zircon_boot_groups == "all") {
    zircon_system_groups = ""
  } else {
    # TODO(mcgrathr): Could default to "" for !is_debug, or "production
    # build".  Note including "test" here places all of Zircon's tests
    # into /system/test, which means that Fuchsia bots run those tests
    # too.
    zircon_system_groups = "misc,test"
  }
}

if (zircon_boot_groups == "all") {
  assert(zircon_system_groups == "",
         "zircon_boot_groups already has everything")
} else {
  assert(zircon_system_groups != "all" && zircon_system_groups != "core",
         "zircon_system_groups cannot include core (or all)")
}

if (current_cpu == "x64") {
  zircon_cpu = "x86-64"
} else {
  zircon_cpu = current_cpu
}

zircon_boot_manifest =
    "//out/build-zircon/build-${zircon_user_project}-${zircon_cpu}/bootfs.manifest"
zircon_ulib_manifest =
    "//out/build-zircon/build-${zircon_user_project}-${zircon_cpu}-ulib/bootfs.manifest"

final_boot_manifest = "$root_out_dir/boot.manifest"
final_system_manifest = "$root_out_dir/system.manifest"

# pkgsvr_index is the static packages index for the package server, it contains
# all package content addresses that are added to the blobstore during the
# build.
pkgsvr_index = "$root_gen_dir/pkgsvr_index"
packages_dir = "$root_build_dir/package"
# Packages blobs manifest is all the blobs from inside all Fuchsia packages, as well as their meta.fars.
packages_blobs_manifest = "$root_build_dir/packages_blobs.manifest"
# Final blobstore manifest is the packages_blobs_manifest.
final_blobstore_manifest = "$root_build_dir/blobstore.manifest"

# Keep the following in sync with the values in
#   //scripts/devshell/lib/image_build_vars.sh
images_dir = "$root_out_dir/images"
system_package_dir = "$root_gen_dir/system.pkg"
system_package_meta_far = "$system_package_dir/meta.far"
system_package_cmdline = "$images_dir/cmdline.txt"
blobstore_image_path = "$images_dir/blobstore.blk"
data_image_path = "$images_dir/data.blk"
fvm_image_path = "$images_dir/fvm.blk"
fvm_sparse_image_path = "$images_dir/fvm.sparse.blk"
fvm_data_sparse_image_path = "$images_dir/fvm.data.sparse.blk"
