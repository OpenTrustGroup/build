# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/rust/rust_artifact.gni")

# Defines a Rust library
#
# Parameters
#
#   name
#     Name of the crate as defined in its manifest file. If not specified, it is
#     assumed to be the same as the target name. The name must match the name of
#     the crate as written in Cargo.toml. This convention is required in order for
#     automatic crate dependency computation to work.
#
#   deps (optional)
#     List of dependency labels. Only dependencies that are not declared via
#     Cargo.toml need to be listed here. Any Rust crates that are dependencies from
#     Cargo.toml will be added during the gen phase of the build.
#
#   libtype (optional)
#     If set to "static", will compile the crate as a staticlib which can be linked
#     into targets from other languages.
#
#   with_unit_tests (optional)
#     Builds tests associated with the library. This will create a
#     `<name>-lib-unit-test` test file in the output directory.
#
#   with_integration_tests (optional)
#     Builds integration tests associated with the library (/tests). This will
#     create a `<name>-<test-file-name>-lib-integration-test` test file in
#     the output directory.
#
# Example of usage:
#
#   rust_library("foo") {
#     name = "foo_rs"
#   }
template("rust_library") {
  rust_artifact(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "libtype",
                             "name",
                             "non_rust_deps",
                             "public",
                             "source_dir",
                             "with_unit_tests",
                             "integration_tests",
                           ])
    if (defined(name)) {
      # This assertion is a requirement of local_dependencies.py in order to compute
      # the label name for rust_library rules.
      assert(name == target_name,
             "name must equal target_name must equal crate name")
    }
    type = "lib"
  }
}
