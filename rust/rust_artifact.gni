# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")

declare_args() {
  # Allows Cargo.lock to be updated when performing local builds.
  use_frozen_with_cargo = true

  # Sets a custom base directory for `rustc` and `cargo`.
  # This can be used to test custom Rust toolchains.
  rustc_prefix = "//buildtools/${host_platform}/rust/bin"
}

# Defines a Rust artifact
#
# Only for internal use, supporting rust_library and rust_binary.
template("rust_artifact") {
  if (defined(invoker.type)) {
    type = invoker.type
    assert(type == "bin" || type == "lib")
  } else {
    assert(false, "Must specify an artifact type")
  }

  if (defined(invoker.name)) {
    name = invoker.name
  } else {
    if (type == "lib") {
      name = exec_script("//build/rust/sanitize_target_name.py",
                         [ target_name ],
                         "trim string")
    } else {
      name = target_name
    }
  }
  source_dir = "."
  if (defined(invoker.source_dir)) {
    source_dir = invoker.source_dir
  }

  target_label = get_label_info(":$target_name", "label_no_toolchain")

  assert(
      current_os == "mac" || current_os == "linux" || current_os == "fuchsia")
  if (current_os == "mac") {
    target_triple = "x86_64-apple-darwin"
    assert(current_cpu == "x64")
  } else if (current_os == "linux") {
    assert(current_cpu == "x64")
    target_triple = "x86_64-unknown-linux-gnu"
  } else if (current_os == "fuchsia") {
    assert(current_cpu == "x64" || current_cpu == "arm64")
    if (current_cpu == "x64") {
      target_triple = "x86_64-unknown-fuchsia"
    } else if (current_cpu == "arm64") {
      target_triple = "aarch64-unknown-fuchsia"
    }
  }

  if (is_debug) {
    build_type = "debug"
  } else {
    build_type = "release"
  }

  group_deps = []

  base_out_dir = "$root_build_dir/rust_targets"
  specific_out_dir = "$base_out_dir/$target_triple/$build_type"

  if (type == "bin") {
    output_file = "$specific_out_dir/$name"
    output_depfile = "$output_file.d"
    build_target_name = "${target_name}_build"
  } else if (type == "lib") {
    output_base = "$specific_out_dir/lib$name"
    output_file = "$output_base.rlib"
    output_depfile = "$output_base.d"
    build_target_name = "${target_name}_lib"
    group_deps += [ ":$build_target_name" ]
  }

  main_target_name = target_name

  if (type == "bin") {
    final_output_name = name
    if (defined(invoker.output_name)) {
      final_output_name = invoker.output_name
    }

    final_output_file = "$root_out_dir/$final_output_name"

    if (current_toolchain == host_toolchain) {
      # Host builds are not stripped
      copy("${main_target_name}_bin") {
        sources = [
          output_file,
        ]
        outputs = [
          final_output_file,
        ]
        deps = [
          ":$build_target_name",
        ]
      }
    } else {
      unstripped_output_file = "$root_out_dir/exe.unstripped/$final_output_name"

      copy("${main_target_name}_unstripped") {
        sources = [
          output_file,
        ]
        outputs = [
          unstripped_output_file,
        ]
        deps = [
          ":$build_target_name",
        ]
      }

      action("${main_target_name}_bin") {
        deps = [
          ":${main_target_name}_unstripped",
        ]
        sources = [
          unstripped_output_file,
        ]

        outputs = [
          final_output_file,
        ]

        # inputs get computed relative to the action location when relative,
        # which clang_prefix is, so we must resolve the path here.
        strip = rebase_path(clang_prefix + "/llvm-objcopy", "", root_build_dir)
        inputs = [
          strip,
        ]

        script = "//build/gn_run_binary.sh"
        args = [
          clang_prefix,
          strip,
          "--strip-sections",
          rebase_path(unstripped_output_file, root_build_dir, "//"),
          rebase_path(final_output_file, root_build_dir, "//"),
        ]
      }
    }

    group_deps += [ ":${main_target_name}_bin" ]
  }

  if ((defined(invoker.with_unit_tests) && invoker.with_unit_tests) ||
      (defined(invoker.with_tests) && invoker.with_tests)) {
    copy("${target_name}_unit_test") {
      base_out_dir = "$root_build_dir/rust_targets"
      sources = [
        "$base_out_dir/$name-$type-unit-test",
      ]

      outputs = [
        "$root_out_dir/$name-$type-unit-test",
      ]

      deps = [
        ":$build_target_name",
      ]
    }

    group_deps += [ ":${target_name}_unit_test" ]
  }

  if (defined(invoker.integration_tests)) {
    foreach(test_name, invoker.integration_tests) {
      copy("${target_name}_${test_name}_integration_test") {
        base_out_dir = "$root_build_dir/rust_targets"
        sources = [
          "$base_out_dir/$name-$test_name-$type-integration-test",
        ]

        outputs = [
          "$root_out_dir/$name-$test_name-$type-integration-test",
        ]

        deps = [
          ":$build_target_name",
        ]
      }

      group_deps += [ ":${target_name}_${test_name}_integration_test" ]
    }
  }

  action(build_target_name) {
    script = "//build/rust/build_target.py"

    depfile = output_depfile

    base_out_dir = "$root_build_dir/rust_targets"
    base_gen_dir = "$target_gen_dir/$main_target_name.rust"

    inputs = [
      "${source_dir}/Cargo.toml",
      "//garnet/Cargo.toml",
      "//garnet/Cargo.lock",
    ]

    outputs = [
      output_file,
    ]

    deps = []
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
    if (defined(invoker.non_rust_deps)) {
      # TODO(raggi): invoker.non_rust_deps should just be deps now, and then
      # use forward_variables_from instead.
      deps += invoker.non_rust_deps
    }

    args = [
             "--type",
             type,
             "--name",
             name,
             "--out-dir",
             rebase_path(base_out_dir),
             "--gen-dir",
             rebase_path(base_gen_dir),
             "--root-out-dir",
             rebase_path(root_build_dir),
             "--root-gen-dir",
             rebase_path(root_gen_dir),
             "--crate-root",
             rebase_path(source_dir),
             "--cargo",
             rebase_path("$rustc_prefix/cargo"),
             "--rustc",
             rebase_path("$rustc_prefix/rustc"),
             "--target-triple",
             target_triple,
             "--label",
             target_label,
             "--cmake-dir",
             rebase_path("//buildtools/cmake/bin"),
             "--vendor-directory",
             rebase_path("//third_party/rust-crates/vendor"),
           ]

    args += [
      "--shared-libs-root",
      rebase_path(
          get_label_info("//default($shlib_toolchain)", "root_out_dir")),
    ]

    if ((defined(invoker.with_unit_tests) && invoker.with_unit_tests) ||
        (defined(invoker.with_tests) && invoker.with_tests)) {
      args += [ "--with-tests" ]

      outputs += [ "$base_out_dir/$name-$type-unit-test" ]
    }

    if (defined(invoker.integration_tests)) {
      args += [ "--with-tests" ]

      foreach(test_name, invoker.integration_tests) {
        outputs += [ "$base_out_dir/$name-$test_name-$type-integration-test" ]
      }
    }

    if (use_frozen_with_cargo) {
      args += [ "--frozen" ]
    }

    if (!is_debug) {
      args += [ "--release" ]
    }

    if (is_fuchsia) {
      deps += [ "//garnet/public/sdk:zircon_sysroot_export" ]

      args += [
        "--clang_prefix",
        rebase_path(clang_prefix, "", root_out_dir),
        "--sysroot",
        rebase_path("$root_out_dir/sdks/zircon_sysroot/sysroot"),
      ]
    }
  }

  group(target_name) {
    public_deps = group_deps
  }
}
