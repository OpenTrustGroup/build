# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")
import("//build/fidl/toolchain.gni")
import("//build/rust/rust_artifact.gni") # for rustc_prefix

template("rustc_third_party_artifact") {
  # Dummy build target to match the one in rustc_artifact
  build_target_name = "${target_name}_build"
  action(build_target_name) {
    script = "//build/rust/write_3p_crate_dep_info.py"
    forward_variables_from(invoker, [ "crate_name" ])

    out_info_path = "${target_out_dir}/${target_name}_info.json"

    args = [
      "--crate-name", crate_name,
      "--output", rebase_path(out_info_path),
    ]
    outputs = [out_info_path]
  }

  group(target_name) {
    public_deps = [":${build_target_name}"]
  }
}

# Defines a Rust artifact to be built directly with rustc (rather than using cargo)
#
# Only for internal use, supporting rustc_library and rustc_binary.
#
# The arguments are the same as for rustc_library and rustc_binary, with the exception
# of `type`, which must be one of bin/lib/staticlib/proc-macro. This is used to determine
# the kind of artifact that is produced by rustc.
template("rustc_artifact") {
  assert(defined(invoker.type), "Must specify an artifact type (bin/lib/staticlib/proc-macro)")
  type = invoker.type

  # bin: executable binary application
  # lib: intermediate artifact to be used in other Rust programs
  # staticlib: a statically-linked system library, generally used for linking Rust into C
  # proc-macro: a procedural macro (such as a custom-derive)
  assert(
    type == "bin" || type == "lib" || type == "staticlib" || type == "proc-macro",
    "Artifact type must be one of: \"bin\", \"lib\", \"staticlib\", or \"proc-macro\""
  )
  if (type == "lib") {
    # For now, lib == rlib, but this could change in future versions of rustc.
    # If/when this changes, we will likely want to transition manually rather
    # than being automatically changed as a result of a toolchain upgrade.
    type = "rlib"
  }

  if (defined(invoker.name)) {
    name = invoker.name
  } else {
    name = target_name
  }

  if (defined(invoker.version)) {
    version = invoker.version
  } else {
    version = "0.1.0"
  }

  if (defined(invoker.source_dir)) {
    source_dir = invoker.source_dir
  } else {
    source_dir = "."
  }

  assert(
    current_os == "mac" || current_os == "linux" || current_os == "fuchsia",
    "current_os was neither mac, linux, nor fuchsia"
  )
  if (current_os == "mac") {
    target_triple = "x86_64-apple-darwin"
    assert(current_cpu == "x64")
  } else if (current_os == "linux") {
    assert(current_cpu == "x64")
    target_triple = "x86_64-unknown-linux-gnu"
  } else if (current_os == "fuchsia") {
    assert(current_cpu == "x64" || current_cpu == "arm64")
    if (current_cpu == "x64") {
      target_triple = "x86_64-unknown-fuchsia"
    } else if (current_cpu == "arm64") {
      target_triple = "aarch64-unknown-fuchsia"
    }
  }

  group_deps = []

  if (is_debug) {
    opt_level = "0"
  } else {
    opt_level = "z"
  }

  # Determine the prefix and extension for the output file based on the crate type
  if (type == "bin") {
    prefix = ""
    extension = ""
  } else if (type == "rlib") {
    prefix = "lib"
    extension = ".rlib"
  } else if (type == "staticlib") {
    prefix = "staticlib"
    extension = ".a"
  } else if (type == "proc-macro") {
    prefix = "macro"
    extension = ".so"
  }

  third_party_build = "//third_party/rust-crates/rustc_deps:build-third-party"
  third_party_deps_data = "${root_out_dir}/rust_third_party/deps_data.json"
  first_party_crate_root = "${root_out_dir}/rust_crates"
  output_file = "${first_party_crate_root}/${prefix}${name}${extension}"
  test_output_file = "${root_out_dir}/${name}_${invoker.type}_test_rustc"

  build_target_name = "${target_name}_build"
  group_deps += [ ":${build_target_name}" ]

  with_unit_tests = defined(invoker.with_unit_tests) && invoker.with_unit_tests

  # Iterate through the deps collecting a list of the outputs
  # of their build targets, which will be passed to rustc as
  # `--extern` crates.
  dep_info_paths = []
  if (defined(invoker.deps)) {
    foreach(dep, invoker.deps) {
      dep_target_name = get_label_info(dep, "name")
      dep_dir = get_label_info(dep, "dir")
      dep_build_target = "${dep_dir}:${dep_target_name}_build"
      dep_out_dir = get_label_info(dep_build_target, "target_out_dir")
      dep_info_path = "${dep_out_dir}/${dep_target_name}_build_info.json"
      dep_info_paths += ["--dep-data", rebase_path(dep_info_path)]
    }
  }

  # Declare the action target that performs the build itself
  action(build_target_name) {
    script = "//build/rust/build_rustc_target.py"

    forward_variables_from(invoker, [ "deps" ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [ third_party_build ]
    inputs = [
      "./src",
    ]

    if (defined(invoker.non_rust_deps)) {
      public_deps = invoker.non_rust_deps
    }

    out_info_path = "${target_out_dir}/${target_name}_info.json"

    args = [
      "--rustc", rebase_path("$rustc_prefix/rustc"),
      "--crate-root", rebase_path(source_dir),
      "--crate-type", type,
      "--crate-name", name,
      "--opt-level", opt_level,
      "--output-file", rebase_path(output_file),
      "--test-output-file", rebase_path(test_output_file),
      "--target", target_triple,
      "--cmake-dir", rebase_path("//buildtools/cmake/bin"),
      "--shared-libs-root", rebase_path(
          get_label_info("//default($shlib_toolchain)", "root_out_dir")),
      "--first-party-crate-root", rebase_path(first_party_crate_root),
      "--third-party-deps-data", rebase_path(third_party_deps_data),
      "--out-info", rebase_path(out_info_path),
      "--version", version,
    ]
    if (with_unit_tests) {
      args += [ "--with-unit-tests" ]
    }

    if (is_fuchsia) {
      deps += [ "//garnet/public/sdk:zircon_sysroot_export" ]
      args += [
        "--clang_prefix", rebase_path(clang_prefix, "", root_out_dir),
        "--sysroot", rebase_path("$root_out_dir/sdks/zircon_sysroot/sysroot"),
      ]
    }
    args += dep_info_paths
    outputs = [ output_file ]
    if (with_unit_tests) {
      outputs += [ test_output_file ]
    }
  }

  cargo_toml_target_name = "${target_name}_cargo"
  group_deps += [ ":${cargo_toml_target_name}" ]
  cargo_toml_dir = target_out_dir
  action(cargo_toml_target_name) {
    script = "//build/rust/write_cargo_toml.py"
    forward_variables_from(invoker, [ "deps" ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [ third_party_build ]
    args = [
      "--out-dir", rebase_path(cargo_toml_dir),
      "--crate-name", name,
      "--crate-type", type,
      "--version", version,
      "--third-party-deps-data", rebase_path(third_party_deps_data),
    ]
    # list of paths to info about crate dependencies
    args += dep_info_paths
    outputs = [ "${cargo_toml_dir}/Cargo.toml" ]
  }

  group(target_name) {
    public_deps = group_deps
  }
}
