# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")
import("//build/config/fuchsia/bootdata.gni")
import("//build/gn/packages.gni")
import("//build/images/boot.gni")
import("//build/images/manifest.gni")
import("//build/package.gni")
import("//build/sdk/sdk_atom.gni")
import("//garnet/go/src/amber/amber.gni")

###
### Zircon BOOTFS and kernel command-line BOOTDATA images.  These are not
### directly usable, but they capture all the Zircon bits and are ready to
### be combined with a system image to make a complete image.
###

declare_args() {
  # File containing kernel command line arguments to roll into the
  # bootdata image used for booting.
  kernel_cmdline_file = ""

  # Groups to include from the Zircon /boot manifest into /boot.
  # This is either "all" or a comma-separated list of one or more of:
  #   core -- necessary to boot
  #   misc -- utilities in /bin
  #   test -- test binaries in /bin and /test
  zircon_boot_groups = "core"
}

declare_args() {
  # Groups to include from the Zircon /boot manifest into /system
  # (instead of into /boot like Zircon's own bootdata.bin does).
  # Should not include any groups that are also in zircon_boot_groups,
  # which see.  If zircon_boot_groups is "all" then this should be "".
  if (zircon_boot_groups == "all") {
    zircon_system_groups = ""
  } else {
    # TODO(mcgrathr): Could default to "" for !is_debug, or "production
    # build".  Note including "test" here places all of Zircon's tests
    # into /system/test, which means that Fuchsia bots run those tests
    # too.
    zircon_system_groups = "misc,test"
  }
}

if (zircon_boot_groups == "all") {
  assert(zircon_system_groups == "",
         "zircon_boot_groups already has everything")
} else {
  assert(zircon_system_groups != "all" && zircon_system_groups != "core",
         "zircon_system_groups cannot include core (or all)")
}

# Generate the manifest of pure Zircon components going into /boot.
generate_manifest("boot.manifest") {
  visibility = [ ":*" ]
  zircon_groups = zircon_boot_groups
  args = []
}

boot_manifest_outputs = get_target_outputs(":boot.manifest")
boot_manifest = boot_manifest_outputs[0]
boot_build_id_map = boot_manifest_outputs[1]

# Generate a BOOTDATA container of the compressed BOOTFS image for /boot.
# It only has to be compressed once, and then this container is combined
# with more BOOTDATA below to make specific images for booting.
bootdata("boot") {
  visibility = [ ":*" ]
  boot = true
  deps = [
    ":boot.manifest",
  ]
  inputs = [
    boot_manifest,
  ]
}

# Inject fixed kernel command-line arguments maintained in the source tree.
bootdata_cmdline("cmdline") {
  visibility = [ ":*" ]
  inputs = [
    "cmdline.txt",
  ]
}

# Let the build configuration choose some extra fixed command-line arguments.
if (kernel_cmdline_file != "") {
  bootdata_cmdline("extra_cmdline") {
    visibility = [ ":*" ]
    inputs = [
      kernel_cmdline_file,
    ]
  }
}

# This makes the complete Zircon BOOTDATA image (sans the kernel itself).
# This includes the /boot filesystem and the fixed kernel command line
# settings from the build (cmdline.txt and build argument
# `kernel_cmdline_file`).
bootdata("bootdata") {
  deps = [
    ":boot",
    ":cmdline",
  ]
  if (kernel_cmdline_file != "") {
    deps += [ ":extra_cmdline" ]
  }
  inputs = []
  foreach(label, deps) {
    inputs += get_target_outputs(label)
  }
}

###
### Fuchsia system image.  This aggregates contributions from all the
### package() targets enabled in the build.
###

pm_binary_label = "//garnet/go/src/pm:pm_bin($host_toolchain)"
pm_out_dir = get_label_info(pm_binary_label, "root_out_dir")
pm_binary = "$pm_out_dir/pm"

# This just runs `pm -k $system_package_key genkey` if the file doesn't exist.
# Every package() target depends on this.
action("system_package_key_check") {
  visibility = [ "*" ]
  deps = [
    pm_binary_label,
  ]
  outputs = [
    "$target_out_dir/system_package_key_check_ok.stamp",
  ]
  script = "//build/gn_run_binary.sh"
  inputs = [
    "system_package_key_check.py",
    pm_binary,
  ]
  args =
      [ clang_prefix ] + rebase_path(inputs + outputs + [ system_package_key ])
}

# The pkgsvr index is a manifest mapping `package_name/package_version` to
# the merkleroot of the package's meta.far file.  The amber index is the
# same thing, but naming each meta.far file instead of its merkleroot.
# TODO(mcgrathr): Make amber-publish take pkgsvr_index directly and
# find the meta.far in its own blob repo.
pkgsvr_index = "$target_out_dir/pkgsvr_index"
amber_index = "$target_out_dir/amber_index"

foreach(index,
        [
          {
            name = "pkgsvr_index"
            visibility = [ ":system_image.manifest" ]
            args = [ "--contents" ]
          },
          {
            name = "amber_index"
            visibility = [ ":amber_publish_index" ]
            args = [ "--absolute" ]
          },
        ]) {
  action(index.name) {
    visibility = index.visibility
    testonly = true

    script = "manifest.py"
    args = index.args
    outputs = [
      "$target_out_dir/$target_name",
    ]
    args += [ "--output=" + rebase_path(outputs[0], root_build_dir) ]
    sources = []
    deps = []
    foreach(pkg_label, package_targets) {
      # Find the response file written by package().
      pkg_target_name = get_label_info(pkg_label, "name")
      pkg_target_out_dir = get_label_info(pkg_label, "target_out_dir")
      pkg_rspfile = "$pkg_target_out_dir/${pkg_target_name}.${index.name}.rsp"
      deps += [ "${pkg_label}.${index.name}.rsp" ]
      sources += [ pkg_rspfile ]
      args += [ "@" + rebase_path(pkg_rspfile, root_build_dir) ]
    }
  }
}

# The system_image "package" manifest is everything that appears in /system.
generate_manifest("system_image.manifest") {
  visibility = [ ":*" ]
  testonly = true

  # First we take the /boot manifest as a "dummy".  This means that its
  # libraries are used to resolve references from binaries going into
  # the output manifest (below) with the assumption that they'll be
  # available to dynamic linking at runtime, but none of the files from
  # the /boot manifest actually go into the output.
  dummy_deps = [ ":boot.manifest" ]

  # Collect whatever we want from Zircon that didn't go into /boot.
  zircon_groups = zircon_system_groups

  # Now each package() target in the build contributes manifest entries.
  # For system_image packages, these contain binaries that need their
  # references resolved from the auxiliary manifests or /boot (above).
  args = []
  deps = []
  sources = []
  foreach(pkg_label, package_targets) {
    # Find the response file written by package().
    pkg_target_name = get_label_info(pkg_label, "name")
    pkg_target_out_dir = get_label_info(pkg_label, "target_out_dir")
    pkg_system_rsp = "$pkg_target_out_dir/${pkg_target_name}.system.rsp"
    deps += [ pkg_label ]
    sources += [ pkg_system_rsp ]
    args += [ "@" + rebase_path(pkg_system_rsp, root_build_dir) ]
  }

  args += [ "--entry-manifest=" +
            get_label_info(":$target_name", "label_no_toolchain") ]

  # Add the meta/package JSON file that makes this the "system_image" package.
  json = "system_meta_package.json"
  sources += [ json ]
  args += [ "--entry=meta/package=" + rebase_path(json, root_build_dir) ]

  # Add the static packages (pkgsvr) index.
  deps += [ ":pkgsvr_index" ]
  sources += [ pkgsvr_index ]
  args += [ "--entry=data/static_packages=" +
            rebase_path(pkgsvr_index, root_build_dir) ]
}

system_manifest_outputs = get_target_outputs(":system_image.manifest")
system_manifest = system_manifest_outputs[0]
system_build_id_map = system_manifest_outputs[1]

# Generate, sign, and seal the system_image package file.
pm_build_package("system_image.meta") {
  visibility = [ ":*" ]
  testonly = true
  manifest = ":system_image.manifest"
}

# Now generate the blob manifest.  This lists all the source files
# that need to go into the blobfs image.  That is everything from the
# system_image manifest, everything from each package manifest, and
# all the synthesized meta.far files.
blob_manifest = "$root_build_dir/blob.manifest"

action("blob.manifest") {
  visibility = [ ":*" ]
  testonly = true
  deps = [
    ":system_image.manifest",
    ":system_image.meta",
  ]
  outputs = [
    blob_manifest,
  ]
  inputs = [
    system_manifest,
  ]
  script = "manifest.py"
  args = [ "@{{response_file_name}}" ]
  response_file_contents = [
    "--sources",
    "--output=" + rebase_path(blob_manifest, root_build_dir),
    "--manifest=" + rebase_path(system_manifest, root_build_dir),
    "--entry=system_image/meta.far=" +
        rebase_path("$target_out_dir/system_image.meta/meta.far",
                    root_build_dir),
  ]
  foreach(pkg_label, package_targets) {
    pkg_target_name = get_label_info(pkg_label, "name")
    pkg_target_out_dir = get_label_info(pkg_label, "target_out_dir")
    pkg_blob_rsp = "$pkg_target_out_dir/${pkg_target_name}.blob.rsp"
    deps += [ "${pkg_label}.blob.rsp" ]
    inputs += [ pkg_blob_rsp ]
    response_file_contents +=
        [ "@" + rebase_path(pkg_blob_rsp, root_build_dir) ]
  }
}

# Pack up all the blobs!
zircon_tool_action("blob.blk") {
  visibility = [
    ":fvm.blk",
    ":fvm.sparse.blk",
  ]
  testonly = true
  deps = [
    ":blob.manifest",
  ]
  blob_image_path = "$target_out_dir/$target_name"
  outputs = [
    blob_image_path,
  ]
  inputs = [
    blob_manifest,
  ]
  tool = "blobfs"
  args = [
    rebase_path(blob_image_path),
    "create",
    "--manifest",
    rebase_path(blob_manifest, root_build_dir),
  ]
}

# Calculate the merkleroots that go into the kernel command line switches.
zircon_tool_action("system_image_merkleroots") {
  visibility = [ ":*" ]
  testonly = true
  outputs = [
    "$target_out_dir/$target_name",
  ]
  pkgsvr_binary_label = "//garnet/go/src/pmd:pkgsvr_bin"
  deps = [
    ":system_image.meta",
    pkgsvr_binary_label,
  ]
  sources = [
    get_label_info(pkgsvr_binary_label, "root_out_dir") + "/pkgsvr",
    "$target_out_dir/system_image.meta/meta.far",
  ]
  tool = "merkleroot"
  args = [ "-o" ] + rebase_path(outputs + sources, root_build_dir)
}

# Massage that into the kernel command line text for
# zircon.system.blob-init and zircon.system.blob-init-arg.
action("system_image_cmdline.txt") {
  visibility = [ ":*" ]
  testonly = true
  outputs = [
    "$target_out_dir/$target_name",
  ]
  deps = [
    ":system_image_merkleroots",
  ]
  sources = get_target_outputs(":system_image_merkleroots")
  script = "system_image_cmdline.py"
  args = rebase_path(outputs + sources, root_build_dir)
}

# Package that command line up as BOOTDATA.
bootdata_cmdline("system_image_cmdline") {
  visibility = [ ":*" ]
  testonly = true
  deps = [
    ":system_image_cmdline.txt",
  ]
  inputs = get_target_outputs(":system_image_cmdline.txt")
}

# Combine the /boot, /system, and package build ID maps into one.
action("ids.txt") {
  testonly = true

  deps = [
    ":boot.manifest",
    ":system_image.manifest",
  ]
  sources = [
    boot_build_id_map,
    system_build_id_map,
  ]

  foreach(pkg_label, package_targets) {
    # Find the ids.txt file written by package().
    manifest = get_label_info(pkg_label, "label_no_toolchain") + ".manifest"
    manifest_target_name = get_label_info(manifest, "name")
    manifest_target_out_dir = get_label_info(manifest, "target_out_dir")
    deps += [ manifest ]
    sources += [ "$manifest_target_out_dir/${manifest_target_name}.ids.txt" ]
  }

  script = "/usr/bin/sort"
  outputs = [
    "$root_out_dir/ids.txt",
  ]
  args = [
           "-u",
           "-o",
         ] + rebase_path(outputs + sources, root_build_dir)
}

###
### Complete images for booting and installing the whole system.
###

declare_args() {
  # The size of the minfs data partition image to create. Normally this image
  # is added to FVM, and can therefore expand as needed. It must be at least
  # 10mb (the default) in order to be succesfully initialized.
  data_image_size = "10m"

  # The size in bytes of the FVM partition image to create. Normally this is
  # computed to be just large enough to fit the blob and data images. The
  # default value is "", which means to size based on inputs. Specifying a size
  # that is too small will result in build failure.
  fvm_image_size = ""

  # Build boot images that prefer Zedboot over local boot.
  always_zedboot = false
}

template("generate_fvm") {
  zircon_tool_action(target_name) {
    visibility = [ ":*" ]
    forward_variables_from(invoker, [ "testonly" ])
    tool = "fvm"
    outputs = [
      invoker.output_name,
    ]
    sources = []
    deps = invoker.deps
    foreach(label, deps) {
      sources += get_target_outputs(label)
    }
    args = rebase_path(outputs, root_build_dir) + invoker.args +
           rebase_path(sources, root_build_dir)
  }
}

fvm_create_args = [ "create" ]

fvm_sparse_args = [
  "sparse",
  "--compress",
  "lz4",
]

# fvm.blk creates a non-sparse FVM partition image containing the blob
# partition produced by blob.blk.  fvm.blk is primarily invoked and used
# by the qemu run, via `fx run-fvm`.
generate_fvm("fvm.blk") {
  testonly = true
  output_name = fvm_image_path
  deps = [
    ":blob.blk",
  ]
  args = fvm_create_args
  if (fvm_image_size != "") {
    args += [
      "--length",
      fvm_image_size,
    ]
  }
  args += [ "--blob" ]
}

# fvm.sparse.blk creates a sparse FVM partition image containing the blob
# partition produced by blob.blk.  fvm.sparse.blk is primarily invoked and
# used by the paver boot, via `fx boot-paver`.
generate_fvm("fvm.sparse.blk") {
  testonly = true
  output_name = fvm_sparse_image_path
  deps = [
    ":blob.blk",
  ]
  args = fvm_sparse_args + [ "--blob" ]
}

# data.blk creates an empty but initialized minfs data partition.
# The partition is included in fvm.data.sparse.blk.
zircon_tool_action("data.blk") {
  tool = "minfs"
  data_image_path = "$target_out_dir/$target_name"
  outputs = [
    data_image_path,
  ]
  args = [
    rebase_path(data_image_path, root_build_dir) + "@${data_image_size}",
    "create",
  ]
}

# fmv.data.sparse.blk is an FVM image containing only data.blk. It is
# used to pave new data partitions to a device.
generate_fvm("fvm.data.sparse.blk") {
  output_name = fvm_data_sparse_image_path
  deps = [
    ":data.blk",
  ]
  args = fvm_sparse_args + [ "--data" ]
}

# This packs up Zircon with the command line to enable /system.
bootdata("bootdata-blob") {
  visibility = [ ":*" ]
  testonly = true
  deps = [
    ":bootdata",
    ":system_image_cmdline",
  ]
  inputs = []
  foreach(label, deps) {
    inputs += get_target_outputs(label)
  }
}

# This packs up the kernel itself with bootdata-blob (above).  This can be
# booted directly from a partition by a Zircon-compatible boot loader and
# will find blobfs dynamically on storage.
bootdata("zircon-boot-blob") {
  visibility = [ ":*" ]
  testonly = true
  inputs = [
    "${zircon_build_dir}/zircon.bin",
  ]
  deps = [
    ":bootdata-blob",
  ]
}

# This packs (compressed) fvm.blk into BOOTDATA_RAMDISK format,
# used by the netboot-* targets below.
bootdata_ramdisk("bootdata-fvm") {
  visibility = [ ":*" ]
  testonly = true
  deps = [
    ":fvm.blk",
  ]
  inputs = []
  foreach(label, deps) {
    inputs += get_target_outputs(label)
  }
}

# This packs up a single BOOTDATA container that includes fvm.blk as a
# RAMDISK image.  This can be used for network booting the full system
# without using any real storage.  The system decompresses the fvm.blk
# image into memory and then sees that RAM disk just as if it were a
# real disk on the device.
bootdata("netboot") {
  testonly = true
  deps = [
    ":bootdata-blob",
    ":bootdata-fvm",
  ]
  inputs = []
  foreach(label, deps) {
    inputs += get_target_outputs(label)
  }
}

# This packs the kernel itself with netboot (above).  This can be booted
# directly from a partition by a Zircon-compatible boot loader and will
# find blobfs directly in the RAMDISK.
bootdata("zircon-netboot") {
  visibility = [ ":*" ]
  testonly = true
  inputs = [
    "${zircon_build_dir}/zircon.bin",
  ]
  deps = [
    ":netboot",
  ]
}

# ChromeOS vboot images.
vboot("zircon") {
  testonly = true
  deps = [
    ":bootdata-blob",
  ]
}

if (target_cpu != "arm64") {
  # EFI ESP images.
  esp("local") {
    testonly = true
    if (always_zedboot) {
      cmdline = "zedboot/efi_cmdline.txt"
    } else {
      cmdline = "efi_local_cmdline.txt"
    }
    zircon_bin = "${zircon_build_dir}/zircon.bin"

    zedboot = "zedboot:zedboot.bin"

    deps = [
      ":bootdata-blob",
    ]
  }
}

# The installer needs all images except for fvm.blk (it has fvm.sparse.blk):
installer_images = [
  "fvm.sparse.blk",
  "fvm.data.sparse.blk",
  "zircon.vboot",
]
installer_zedboot_images = [ "zedboot.vboot" ]
if (target_cpu != "arm64") {
  installer_images += [ "local.esp.blk" ]
  installer_zedboot_images += [ "zedboot.esp.blk" ]
}

installer_label = "//garnet/bin/installer:install-fuchsia"
installer_out_dir = get_label_info(installer_label, "root_out_dir")
installer_path = "$installer_out_dir/install-fuchsia"

action("installer.manifest") {
  script = "manifest.py"
  outputs = [
    "$target_out_dir/installer.manifest",
  ]
  args = [
    "--output=" + rebase_path(outputs[0], root_build_dir),
    "--output-cwd=" + rebase_path(target_out_dir, root_build_dir),
    "--entry=install-fuchsia=" + rebase_path(installer_path, root_build_dir),
  ]
  foreach(image, installer_images + installer_zedboot_images) {
    args += [ "--entry=${image}=" +
              rebase_path("$images_dir/$image", root_build_dir) ]
  }
}

# installer.blk is a minfs partition image that includes all of the
# images required to install a Fuchsia build.
zircon_tool_action("installer") {
  testonly = true
  tool = "minfs"
  deps = [
    ":installer.manifest",
    installer_label,
  ]
  outputs = [
    "$images_dir/installer.blk",
  ]
  sources = []
  foreach(image, installer_images) {
    deps += [ ":$image" ]
    sources += [ "$images_dir/$image" ]
  }
  foreach(image, installer_zedboot_images) {
    deps += [ "zedboot:$image" ]
    sources += [ "$images_dir/$image" ]
  }
  args = [
    rebase_path(outputs[0], root_build_dir),
    "create",
    "--manifest",
  ]
  args += rebase_path(get_target_outputs(":installer.manifest"), root_build_dir)
}

# TODO(mcgrathr): Temporary until scripts and recipes get updated.
board = "qemu"
if (target_cpu == "x64") {
  board = "pc"
}
copy("bootdata-blob-${board}.bin") {
  testonly = true
  outputs = [
    "$root_out_dir/bootdata-blob-${board}.bin",
  ]
  sources = [
    "$root_out_dir/bootdata-blob.bin",
  ]
  deps = [
    ":bootdata-blob",
  ]
}
if (target_cpu == "x64") {
  copy("local-${board}.esp.blk") {
    testonly = true
    outputs = [
      "$images_dir/local-${board}.esp.blk",
    ]
    sources = [
      "$images_dir/local.esp.blk",
    ]
    deps = [
      ":local.esp.blk",
    ]
  }
  copy("zircon-${board}.vboot") {
    testonly = true
    outputs = [
      "$images_dir/zircon-${board}.vboot",
    ]
    sources = [
      "$images_dir/zircon.vboot",
    ]
    deps = [
      ":zircon.vboot",
    ]
  }
}
group("legacy-images") {
  visibility = [ ":images" ]
  testonly = true
  deps = [
    ":bootdata-blob-${board}.bin",
  ]
  if (target_cpu == "x64") {
    deps += [
      ":local-${board}.esp.blk",
      ":zircon-${board}.vboot",
    ]
  }
}

group("images") {
  testonly = true
  deps = [
    ":fvm.blk",
    ":fvm.data.sparse.blk",
    ":fvm.sparse.blk",
    ":ids.txt",
    ":legacy-images",
    ":zircon-boot-blob",
    ":zircon.vboot",
    "zedboot",
  ]
  if (target_cpu != "arm64") {
    deps += [ ":local.esp.blk" ]
  }
}

###
### Amber updates.
###

# The blob.manifest that drives blob.blk is just a flat list of files.
# blob_merkleroot.manifest is a manifest file of "HEXDIGITS=FILENAME"
# lines.  Note that this repeats all the same merkleroot computations
# that blobfs does while building blob.blk, which is wasteful if the
# build is doing both (though the computations can go in parallel and
# filesystem caching should mitigate the cost of reading the files
# twice).  If we're always going to build blob.blk, we could teach
# blobfs to emit this manifest on the side rather than recomputing it
# here.  But if someone tells ninja to build `updates` without `images`,
# then this computation alone should be faster than building blob.blk.
zircon_tool_action("blob_merkleroot.manifest") {
  testonly = true
  visibility = [ ":amber_publish_blobs" ]
  tool = "merkleroot"
  deps = [
    ":blob.manifest",
  ]
  outputs = [
    "$target_out_dir/$target_name",
  ]
  inputs = [
    blob_manifest,
  ]
  args = [
    "-m",
    rebase_path(outputs[0]),
    "@" + rebase_path(blob_manifest),
  ]
}

# Populate the repository directory with content ID-named copies.
action("amber_publish_blobs") {
  testonly = true
  outputs = [
    "$amber_repository_dir.stamp",
  ]
  deps = [
    ":blob_merkleroot.manifest",
  ]
  inputs = get_target_outputs(deps[0])
  script = "manifest.py"
  args = [
    "--copytree",
    "--output=" + rebase_path(amber_repository_blobs_dir),
    "--stamp=" + rebase_path("$amber_repository_dir.stamp"),
  ]
  foreach(manifest, inputs) {
    args += [ "--manifest=" + rebase_path(manifest, root_build_dir) ]
  }
}

# Sign and publish the package index.
amber_publish("amber_publish_index") {
  testonly = true
  deps = [
    ":amber_index",
  ]
  inputs = [
    amber_index,
  ]
}

group("updates") {
  testonly = true
  deps = [
    ":amber_publish_blobs",
    ":amber_publish_index",
    ":ids.txt",
  ]
}

# SDK

sdk_atom("fvm.blk_sdk") {
  domain = "image"
  name = "fvm.blk"
  category = "partner"
  testonly = true

  files = [
    {
      source = "$images_dir/fvm.blk"
      dest = "fvm.blk"
    }
  ]

  non_sdk_deps = [
    ":fvm.blk",
  ]
}

sdk_atom("bootdata-blob.bin_sdk") {
  domain = "image"
  name = "bootdata-blob.bin"
  category = "partner"
  testonly = true

  files = [
    {
      source = "$root_out_dir/bootdata-blob.bin"
      dest = "bootdata-blob.bin"
    }
  ]

  non_sdk_deps = [
    ":bootdata-blob",
  ]
}

# TODO(alainv): Add dependency to zircon.bin when such a target exists.
sdk_atom("zircon.bin_sdk") {
  domain = "image"
  name = "zircon.bin"
  category = "partner"
  testonly = true

  files = [
    {
      source = "${zircon_build_dir}/zircon.bin"
      dest = "zircon.bin"
    }
  ]
}

sdk_atom("zircon.vboot_sdk") {
  domain = "image"
  name = "zircon.vboot"
  category = "partner"
  testonly = true

  files = [
    {
      source = "$images_dir/zircon.vboot"
      dest = "zircon.vboot"
    }
  ]

  non_sdk_deps = [
    ":zircon.vboot",
  ]
}

if (target_cpu != "arm64") {
  sdk_atom("local.esp.blk_sdk") {
    domain = "image"
    name = "local.esp.blk"
    category = "partner"
    testonly = true

    files = [
      {
        source = "$images_dir/local.esp.blk"
        dest = "local.esp.blk"
      }
    ]

    non_sdk_deps = [
      ":local.esp.blk",
    ]
  }
}

sdk_atom("fvm.sparse.blk_sdk") {
  domain = "image"
  name = "fvm.sparse.blk"
  category = "partner"
  testonly = true

  files = [
    {
      source = "$images_dir/fvm.sparse.blk"
      dest = "fvm.sparse.blk"
    }
  ]

  non_sdk_deps = [
    ":fvm.sparse.blk",
  ]
}
